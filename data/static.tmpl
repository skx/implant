//
// This file was generated via github.com/skx/implant/
//
// Local edits will be lost.
//
package {{.Package}}

import (
    "bytes"
    "compress/gzip"
    "encoding/hex"
    "fmt"
    "io/ioutil"
)

//
// EmbeddedResource is the structure which is used to record details of
// each embedded resource in your binary.
//
// The resource contains the (original) filename, relative to the input
// directory `implant` was generated with, along with the original size
// and the compressed/encoded data.
//
type EmbeddedResource struct {
    Filename string
    Contents string
    Length   int
}

//
// RESOURCES is a map containing all embedded resources. The map key is the
// file name.
//
// It is exposed to callers via the `getResources()` function.
//
var RESOURCES = map[string]EmbeddedResource{
	{{range .Resources}}
	"{{.Filename}}": {
		Filename: "{{.Filename}}",
		Contents: "{{.Contents}}",
		Length: {{.Length}},
	},
	{{end}}
}

//
// Return the contents of a resource.
//
func getResource( path string  ) ([]byte, error) {
	if entry, ok := RESOURCES[path]; ok {
		var raw bytes.Buffer
		var err error

		// Decode the data.
		in, err := hex.DecodeString(entry.Contents)
		if err != nil {
			return nil, err
		}

		// Gunzip the data to the client
		gr, err := gzip.NewReader(bytes.NewBuffer(in))
		if ( err != nil ) {
			return nil, err
		}
		defer gr.Close()
		data, err := ioutil.ReadAll(gr)
		if err != nil {
			return nil, err
		}
		_, err = raw.Write(data)
		if ( err != nil ) {
			return nil, err
		}

		// Return it.
		return raw.Bytes(), nil
	}
    return nil, fmt.Errorf("failed to find resource '%s'", path)
}

//
// Return the available resources in a slice.
//
func getResources() []EmbeddedResource {
	i := 0
	ret := make([]EmbeddedResource, len(RESOURCES))
	for _, v := range RESOURCES {
		ret[i] = v
		i++
	}
	return ret
}
